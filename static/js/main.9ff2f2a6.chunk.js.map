{"version":3,"sources":["components/keyImporter.js","crypto/cryptography.js","components/requestMasterKeyComponent.js","persistence/persistence.js","components/configureCredentials.js","components/homeComponent.js","App.js","serviceWorker.js","index.js"],"names":["KeyImporter","importKeys","fetch","state","address","then","result","json","window","localStorage","hips","JSON","stringify","props","onImport","catch","err","alert","console","log","changeAddress","e","setState","target","value","className","id","placeholder","this","onChange","onClick","React","Component","getRsaKeys","masterPassword","hipsData","parse","passString","saltString","pass","Uint8Array","from","c","charCodeAt","salt","atob","crypto","subtle","importKey","name","key","deriveKey","iterations","hash","length","iv","encoded","keys","decrypt","buffer","decodedString","TextDecoder","decode","privateKey","publicKey","Error","validateKeys","RequestMasterKeyComponent","handleInput","masterKey","unlock","onFinish","test","type","getData","username","gistId","Promise","resolve","gists","find","gist","description","match","getGistId","files","content","getRawData","rawData","data","NodeRSA","rsaDecrypt","ConfigureCredentialsComponent","githubUsername","submit","credentials","HomeComponent","select","p","selected","password","onSelect","reset","location","reload","passwords","Fragment","map","data-clipboard-text","onSuccess","loadCredentials","App","dataImportedCallback","hasImportedData","masterKeyCallback","credentialsCallback","renderPage","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ff2f2a6.chunk.js","sourcesContent":["import React from 'react';\n\nclass KeyImporter extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      address: 'localhost'\n    };\n  }\n  \n  importKeys = () => {\n    fetch(`http://${this.state.address}:8000/keys`)\n      .then(result => result.json())\n      .then(json => {\n        window.localStorage.hips = JSON.stringify(json);\n        this.props.onImport();\n      })\n      .catch(err => {\n        alert(err);\n        console.log(err);\n      });\n  }\n\n  changeAddress = (e) => {\n    this.setState({address: e.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"importer\">\n        <p>To import the keys, run <span className=\"code\">hips export-key</span> on the console in your computer, and enter here the IP address or the DNS name of the computer.</p>\n        <input\n            id=\"address-input\"\n            className=\"input is-primary importer-input\"\n            placeholder=\"Address\"\n            value={this.state.address}\n            onChange={this.changeAddress} />\n          <button \n            className=\"button is-primary importer-button\" \n            onClick={this.importKeys}>Import</button>\n      </div>\n    )\n  }\n}\n\nexport default KeyImporter;","import NodeRSA from 'node-rsa';\n\nexport function getRsaKeys(masterPassword) {\n  const hipsData = JSON.parse(window.localStorage.hips);\n  return deriveKey(masterPassword, hipsData.salt)\n    .then(key => {\n      let iv = Uint8Array.from(atob(hipsData.iv), c => c.charCodeAt(0));\n      let encoded = Uint8Array.from(atob(hipsData.keys), c => c.charCodeAt(0));\n      return window.crypto.subtle.decrypt({\n        name: 'AES-CBC',\n        iv: iv\n      }, key, encoded)\n    })\n    .then(buffer => {\n      const decodedString = new TextDecoder().decode(buffer);\n      const keys = JSON.parse(decodedString);\n      validateKeys(keys);\n      return keys;\n    });\n}\n\nexport function rsaDecrypt(privateKey, data) {\n  const key = new NodeRSA();\n  key.importKey(privateKey);\n\n  const result = new TextDecoder().decode(key.decrypt(data));\n  return JSON.parse(result);\n}\n  \n\nfunction deriveKey(passString, saltString) {\n  let pass = Uint8Array.from(passString, c => c.charCodeAt(0));\n  let salt = Uint8Array.from(atob(saltString), c => c.charCodeAt(0));\n  return window.crypto.subtle.importKey(\n      \"raw\",\n      pass,\n      {\n          name: \"PBKDF2\",\n      },\n      false,\n      [\"deriveKey\", \"deriveBits\"]\n  ).then(key => window.crypto.subtle.deriveKey(\n    {\n        \"name\": \"PBKDF2\",\n        salt: salt,\n        iterations: 10000,\n        hash: {name: \"SHA-256\"},\n    },\n    key,\n    { \n        name: \"AES-CBC\", \n        length: 256,\n    },\n    false, \n    [\"encrypt\", \"decrypt\"]\n  ));\n}\n\nfunction validateKeys(keys) {\n  if(!keys.privateKey || !keys.publicKey) {\n    throw new Error('Invalid decrypted data');\n  }\n}","import React from 'react';\nimport {getRsaKeys} from '../crypto/cryptography';\n\nclass RequestMasterKeyComponent extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      masterKey: '',\n      test: ''\n    };\n    this.crypto = JSON.parse(window.localStorage.hips);\n  }\n\n  handleInput = (e) => {\n    this.setState({masterKey: e.target.value});\n  }\n\n  unlock = () => {\n    getRsaKeys(this.state.masterKey).then(keys => {\n      this.props.onFinish(this.state.masterKey);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"masterkey\">\n        <h1 className=\"title is-3\">Enter Master Key</h1>\n        <input type=\"password\" value={this.state.masterKey} onChange={this.handleInput} className=\"input is-primary\" />\n        <button className=\"button is-primary is-large masterkey-button\" onClick={this.unlock}>Unlock</button>\n        <p>{this.state.test}</p>\n      </div>\n    );\n  }\n}\n\nexport default RequestMasterKeyComponent;","import {getRsaKeys, rsaDecrypt} from '../crypto/cryptography';\n\nexport function getData(masterKey, username) {\n  let privateKey;\n  return getRsaKeys(masterKey).then((keys) => {\n    privateKey = keys.privateKey;\n    return getRawData(username);\n  }).then(rawData => rsaDecrypt(privateKey, rawData));\n}\n\nfunction getRawData(username) {\n    return getGistId(username)\n    .then(id => fetch(`https://api.github.com/gists/${id}`))\n    .then(result => result.json())\n    .then(gist => {\n      return gist.files['hips_passwords'].content;\n    });\n}\n\nfunction getGistId(username) {\n  if (window.localStorage.gistId) {\n    return Promise.resolve(window.localStorage.gistId);\n  }\n  return fetch(`https://api.github.com/users/${username}/gists`)\n  .then(result => result.json())\n  .then(gists => gists.find(gist => gist.description.match(/^hips.storage$/)))\n  .then(gist => {\n    window.localStorage.gistId = gist.id;\n    return gist.id;\n  });\n}","import React from 'react';\nimport {getData} from '../persistence/persistence';\n\nclass ConfigureCredentialsComponent extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      githubUsername: ''\n    }\n  }\n\n  handleInput = (e) => {\n    this.setState({githubUsername: e.target.value});\n  }\n\n  submit = () => {\n    const data = getData(this.props.masterKey, this.state.githubUsername);\n    if(data) {\n      window.localStorage.credentials = JSON.stringify({\n        githubUsername: this.state.githubUsername\n      });\n      this.props.onFinish();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"masterkey\">\n        <h1 className=\"title is-3\">Github Username</h1>\n        <input type=\"text\" value={this.state.githubUsername} onChange={this.handleInput} className=\"input is-primary\" />\n        <button className=\"button is-primary is-large masterkey-button\" onClick={this.submit}>Search</button>\n      </div>\n    );\n  }\n}\n\nexport default ConfigureCredentialsComponent;","import React from 'react';\nimport {getData} from '../persistence/persistence';\nimport Clipboard from 'react-clipboard.js';\n\nclass HomeComponent extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      passwords: [],\n      selected: ''\n    };\n  }\n\n  componentDidMount() {\n    getData(this.props.masterKey, this.props.credentials.githubUsername).then(data => {\n      this.setState({passwords: data.passwords})\n    });\n  }\n\n  select = (p) => () => {\n    this.setState({selected: p.password});\n  }\n\n  onSelect = (p) => () => {\n    alert(`password ${p.name} copied to the clipboard`);\n  }\n\n  reset = () => {\n    delete window.localStorage.hips;\n    delete window.localStorage.gistId;\n    delete window.localStorage.credentials;\n    window.location.reload();\n  }\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"home\">\n          <h1 className=\"title is-3 home-title\">Stored Passwords</h1>\n          <div className=\"home-passwords\">\n            {this.state.passwords.map(p => (\n                <Clipboard key={p.key} className=\"button home-button is-primary\" data-clipboard-text={p.password} onSuccess={this.onSelect(p)}>\n                  {p.name}\n                </Clipboard>\n            ))}\n          </div>\n        </div>\n        <div className=\"reset-wrapper\">\n          <button className=\"button home-reset is-danger is-fullwidth\" onClick={this.reset}>reset</button>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default HomeComponent;","import React from 'react';\nimport './App.css';\nimport 'bulma';\nimport KeyImporter from './components/keyImporter';\nimport RequestMasterKeyComponent from './components/requestMasterKeyComponent';\nimport ConfigureCredentialsComponent from './components/configureCredentials';\nimport HomeComponent from './components/homeComponent';\n\nfunction hasImportedData() {\n  return !!window.localStorage.hips;\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      hasImportedData: hasImportedData(),\n      masterKey: '',\n      credentials: loadCredentials()\n    }\n  }\n\n  dataImportedCallback = () => {\n    this.setState({hasImportedData: true});\n  }\n\n  masterKeyCallback = (key) => {\n    this.setState({masterKey: key});\n  }\n\n  credentialsCallback = () => {\n    this.setState({credentials: loadCredentials()});\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        {this.renderPage()}\n      </div>\n    );\n  }\n\n  renderPage() {\n    if(!this.state.hasImportedData) {\n      return <KeyImporter onImport={this.dataImportedCallback} />\n    }\n    else if (!this.state.masterKey) {\n      return <RequestMasterKeyComponent onFinish={this.masterKeyCallback} />\n    }\n    else if (!this.state.credentials) {\n      return <ConfigureCredentialsComponent masterKey={this.state.masterKey} onFinish={this.credentialsCallback} />\n    }\n    else {\n      return <HomeComponent masterKey={this.state.masterKey} credentials={this.state.credentials}/>\n    }\n  }\n}\n\nfunction loadCredentials() {\n  try{\n    return JSON.parse(window.localStorage.credentials)\n  }\n  catch(err) {\n    return null;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}