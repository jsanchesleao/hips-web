{"version":3,"sources":["crypto/cryptography.js","persistence/persistence.js","components/keyImporter.js","components/requestMasterKeyComponent.js","components/homeComponent.js","App.js","serviceWorker.js","index.js"],"names":["getRsaKeys","masterPassword","hipsData","JSON","parse","window","localStorage","hips","passString","saltString","pass","Uint8Array","from","c","charCodeAt","salt","atob","crypto","subtle","importKey","name","then","key","deriveKey","iterations","hash","length","iv","encoded","keys","decrypt","buffer","decodedString","TextDecoder","decode","privateKey","publicKey","Error","validateKeys","getData","masterKey","username","gistId","Promise","resolve","fetch","result","json","gists","find","gist","description","match","id","getGistId","getGistById","files","content","getRawData","rawData","data","NodeRSA","rsaDecrypt","KeyImporter","handleError","err","setState","error","stack","handleScan","doImport","state","importStarted","URLSearchParams","location","search","get","this","owner","login","props","callback","catch","console","log","delay","onError","onScan","style","width","className","renderWaitingScreen","renderQRCOdeReader","React","Component","RequestMasterKeyComponent","handleInput","e","target","value","unlock","onFinish","test","type","onChange","onClick","HomeComponent","select","p","selected","password","onSelect","alert","reset","credentials","reload","passwords","Fragment","map","data-clipboard-text","onSuccess","App","masterKeyCallback","importCallback","hasImportedData","renderPage","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gZAEO,SAASA,EAAWC,GACzB,IAAMC,EAAWC,KAAKC,MAAMC,OAAOC,aAAaC,MAChD,OA0BF,SAAmBC,EAAYC,GAC7B,IAAIC,EAAOC,WAAWC,KAAKJ,GAAY,SAAAK,GAAC,OAAIA,EAAEC,WAAW,MACrDC,EAAOJ,WAAWC,KAAKI,KAAKP,IAAa,SAAAI,GAAC,OAAIA,EAAEC,WAAW,MAC/D,OAAOT,OAAOY,OAAOC,OAAOC,UACxB,MACAT,EACA,CACIU,KAAM,WAEV,EACA,CAAC,YAAa,eAChBC,MAAK,SAAAC,GAAG,OAAIjB,OAAOY,OAAOC,OAAOK,UACjC,CACI,KAAQ,SACRR,KAAMA,EACNS,WAAY,IACZC,KAAM,CAACL,KAAM,YAEjBE,EACA,CACIF,KAAM,UACNM,OAAQ,MAEZ,EACA,CAAC,UAAW,eAlDPH,CAAUtB,EAAgBC,EAASa,MACvCM,MAAK,SAAAC,GACJ,IAAIK,EAAKhB,WAAWC,KAAKI,KAAKd,EAASyB,KAAK,SAAAd,GAAC,OAAIA,EAAEC,WAAW,MAC1Dc,EAAUjB,WAAWC,KAAKI,KAAKd,EAAS2B,OAAO,SAAAhB,GAAC,OAAIA,EAAEC,WAAW,MACrE,OAAOT,OAAOY,OAAOC,OAAOY,QAAQ,CAClCV,KAAM,UACNO,GAAIA,GACHL,EAAKM,MAETP,MAAK,SAAAU,GACJ,IAAMC,GAAgB,IAAIC,aAAcC,OAAOH,GACzCF,EAAO1B,KAAKC,MAAM4B,GAExB,OAyCN,SAAsBH,GACpB,IAAIA,EAAKM,aAAeN,EAAKO,UAC3B,MAAM,IAAIC,MAAM,0BA5CdC,CAAaT,GACNA,KCfN,SAASU,EAAQC,EAAWC,GACjC,IAAIN,EACJ,OAAOnC,EAAWwC,GAAWnB,MAAK,SAACQ,GAEjC,OADAM,EAAaN,EAAKM,WAStB,SAAoBM,GAChB,OAOJ,SAAmBA,GACjB,GAAIpC,OAAOC,aAAaoC,OACtB,OAAOC,QAAQC,QAAQvC,OAAOC,aAAaoC,QAE7C,OAAOG,MAAM,gCAAD,OAAiCJ,EAAjC,WACXpB,MAAK,SAAAyB,GAAM,OAAIA,EAAOC,UACtB1B,MAAK,SAAA2B,GAAK,OAAIA,EAAMC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,YAAYC,MAAM,wBACxD/B,MAAK,SAAA6B,GAEJ,OADA7C,OAAOC,aAAaoC,OAASQ,EAAKG,GAC3BH,EAAKG,MAhBLC,CAAUb,GAChBpB,KAAKkC,GACLlC,MAAK,SAAA6B,GACJ,OAAOA,EAAKM,MAAL,eAA6BC,WAZ/BC,CAAWjB,MACjBpB,MAAK,SAAAsC,GAAO,ODcV,SAAoBxB,EAAYyB,GACrC,IAAMtC,EAAM,IAAIuC,IAChBvC,EAAIH,UAAUgB,GAEd,IAAMW,GAAS,IAAIb,aAAcC,OAAOZ,EAAIQ,QAAQ8B,IACpD,OAAOzD,KAAKC,MAAM0C,GCnBCgB,CAAW3B,EAAYwB,MAGrC,SAASJ,EAAYb,GAC1B,OAAOG,MAAM,gCAAD,OAAiCH,IAAUrB,MAAK,SAAAyB,GAAM,OAAIA,EAAOC,U,qBCuEhEgB,E,YA5Eb,aAAe,IAAD,8BACZ,+CA6BFC,YAAc,SAACC,GACb,EAAKC,SAAS,CAACC,MAAOF,EAAIG,SA/Bd,EAkCdC,WAAa,SAAA3B,GACX,EAAK4B,SAAS5B,IAjCd,EAAK6B,MAAQ,CACXC,eAAe,EACfL,MAAO,MAJG,E,iFASZ,IACMzB,EADY,IAAI+B,gBAAgBpE,OAAOqE,SAASC,QAC7BC,IAAI,UACzBlC,GACFmC,KAAKP,SAAS5B,K,+BAITA,GAAS,IAAD,OACfmC,KAAKX,SAAS,CAACM,eAAe,IAC9BjB,EAAYb,GACXrB,MAAK,SAAA6B,GACJ7C,OAAOC,aAAamC,SAAWS,EAAK4B,MAAMC,MAC1C1E,OAAOC,aAAaC,KAAO2C,EAAKM,MAAL,UAAwBC,QACnD,EAAKuB,MAAMC,cAEZC,OAAM,SAAAjB,GACLkB,QAAQC,IAAInB,GACZ,EAAKC,SAAS,CAACC,MAAOF,EAAIG,a,2CAa5B,OACE,6BACE,4DACA,kBAAC,IAAD,CACIiB,MAAO,IACPC,QAAST,KAAKb,YACduB,OAAQV,KAAKR,WACbmB,MAAO,CAAEC,MAAO,UACnBZ,KAAKN,MAAMJ,OACV,2BAAIU,KAAKN,MAAMJ,U,4CAOrB,OACE,yBAAKuB,UAAU,YACb,wBAAIA,UAAU,cAAd,8BACA,0CACCb,KAAKN,MAAMJ,OACV,2BAAIU,KAAKN,MAAMJ,U,+BAOrB,OAAIU,KAAKN,MAAMC,cACNK,KAAKc,sBAGLd,KAAKe,yB,GAzEQC,IAAMC,WCkCjBC,E,YAjCb,aAAe,IAAD,8BACZ,+CAQFC,YAAc,SAACC,GACb,EAAK/B,SAAS,CAAC1B,UAAWyD,EAAEC,OAAOC,SAVvB,EAadC,OAAS,WACPpG,EAAW,EAAKuE,MAAM/B,WAAWnB,MAAK,SAAAQ,GACpC,EAAKmD,MAAMqB,SAAS,EAAK9B,MAAM/B,cAC9B0C,OAAM,SAAAjB,GACPkB,QAAQC,IAAInB,OAfd,EAAKM,MAAQ,CACX/B,UAAW,GACX8D,KAAM,IAER,EAAKrF,OAASd,KAAKC,MAAMC,OAAOC,aAAaC,MANjC,E,sEAsBZ,OACE,yBAAKmF,UAAU,aACb,wBAAIA,UAAU,cAAd,oBACA,2BAAOa,KAAK,WAAWJ,MAAOtB,KAAKN,MAAM/B,UAAWgE,SAAU3B,KAAKmB,YAAaN,UAAU,qBAC1F,4BAAQA,UAAU,8CAA8Ce,QAAS5B,KAAKuB,QAA9E,UACA,2BAAIvB,KAAKN,MAAM+B,W,GA7BiBT,IAAMC,W,iBCuD/BY,E,YApDb,aAAe,IAAD,8BACZ,+CAcFC,OAAS,SAACC,GAAD,OAAO,WACd,EAAK1C,SAAS,CAAC2C,SAAUD,EAAEE,aAhBf,EAmBdC,SAAW,SAACH,GAAD,OAAO,WAChBI,MAAM,YAAD,OAAaJ,EAAExF,KAAf,+BApBO,EAuBd6F,MAAQ,kBACC5G,OAAOC,aAAaC,YACpBF,OAAOC,aAAaoC,cACpBrC,OAAOC,aAAa4G,YAC3B7G,OAAOqE,SAASyC,UAzBhB,EAAK5C,MAAQ,CACX6C,UAAW,GACXP,SAAU,IAJA,E,iFAQO,IAAD,OACZpE,EAAWpC,OAAOC,aAAamC,SACrCF,EAAQsC,KAAKG,MAAMxC,UAAWC,GAAUpB,MAAK,SAAAuC,GAC3C,EAAKM,SAAS,CAACkD,UAAWxD,EAAKwD,iB,+BAoBzB,IAAD,OACP,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAK3B,UAAU,QACb,wBAAIA,UAAU,yBAAd,oBACA,yBAAKA,UAAU,kBACZb,KAAKN,MAAM6C,UAAUE,KAAI,SAAAV,GAAC,OACvB,kBAAC,IAAD,CAAWtF,IAAKsF,EAAEtF,IAAKoE,UAAU,gCAAgC6B,sBAAqBX,EAAEE,SAAUU,UAAW,EAAKT,SAASH,IACxHA,EAAExF,WAKb,yBAAKsE,UAAU,iBACb,4BAAQA,UAAU,2CAA2Ce,QAAS5B,KAAKoC,OAA3E,e,GA/CkBpB,IAAMC,W,IC6CnB2B,E,YArCb,aAAe,IAAD,8BACZ,+CAOFC,kBAAoB,SAACpG,GACnB,EAAK4C,SAAS,CAAC1B,UAAWlB,KATd,EAYdqG,eAAiB,WACf,EAAKzD,SAAS,CAAC0D,iBAAiB,KAXhC,EAAKrD,MAAQ,CACXqD,kBAPKvH,OAAOC,aAAaC,KAQzBiC,UAAW,IAJD,E,sEAiBZ,OACE,yBAAKkD,UAAU,OACZb,KAAKgD,gB,mCAMV,OAAIhD,KAAKN,MAAMqD,gBAGL/C,KAAKN,MAAM/B,UAIZ,kBAAC,EAAD,CAAeA,UAAWqC,KAAKN,MAAM/B,YAHrC,kBAAC,EAAD,CAA2B6D,SAAUxB,KAAK6C,oBAH1C,kBAAC,EAAD,CAAazC,SAAUJ,KAAK8C,qB,GA3BvB9B,IAAMC,WCCJgC,QACW,cAA7BzH,OAAOqE,SAASqD,UAEe,UAA7B1H,OAAOqE,SAASqD,UAEhB1H,OAAOqE,SAASqD,SAAS3E,MACvB,2DCZN4E,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjH,MAAK,SAAAkH,GACjCA,EAAaC,kB","file":"static/js/main.46c936fd.chunk.js","sourcesContent":["import NodeRSA from 'node-rsa';\n\nexport function getRsaKeys(masterPassword) {\n  const hipsData = JSON.parse(window.localStorage.hips);\n  return deriveKey(masterPassword, hipsData.salt)\n    .then(key => {\n      let iv = Uint8Array.from(atob(hipsData.iv), c => c.charCodeAt(0));\n      let encoded = Uint8Array.from(atob(hipsData.keys), c => c.charCodeAt(0));\n      return window.crypto.subtle.decrypt({\n        name: 'AES-CBC',\n        iv: iv\n      }, key, encoded)\n    })\n    .then(buffer => {\n      const decodedString = new TextDecoder().decode(buffer);\n      const keys = JSON.parse(decodedString);\n      validateKeys(keys);\n      return keys;\n    });\n}\n\nexport function rsaDecrypt(privateKey, data) {\n  const key = new NodeRSA();\n  key.importKey(privateKey);\n\n  const result = new TextDecoder().decode(key.decrypt(data));\n  return JSON.parse(result);\n}\n  \n\nfunction deriveKey(passString, saltString) {\n  let pass = Uint8Array.from(passString, c => c.charCodeAt(0));\n  let salt = Uint8Array.from(atob(saltString), c => c.charCodeAt(0));\n  return window.crypto.subtle.importKey(\n      \"raw\",\n      pass,\n      {\n          name: \"PBKDF2\",\n      },\n      false,\n      [\"deriveKey\", \"deriveBits\"]\n  ).then(key => window.crypto.subtle.deriveKey(\n    {\n        \"name\": \"PBKDF2\",\n        salt: salt,\n        iterations: 10000,\n        hash: {name: \"SHA-256\"},\n    },\n    key,\n    { \n        name: \"AES-CBC\", \n        length: 256,\n    },\n    false, \n    [\"encrypt\", \"decrypt\"]\n  ));\n}\n\nfunction validateKeys(keys) {\n  if(!keys.privateKey || !keys.publicKey) {\n    throw new Error('Invalid decrypted data');\n  }\n}","import {getRsaKeys, rsaDecrypt} from '../crypto/cryptography';\n\nexport function getData(masterKey, username) {\n  let privateKey;\n  return getRsaKeys(masterKey).then((keys) => {\n    privateKey = keys.privateKey;\n    return getRawData(username);\n  }).then(rawData => rsaDecrypt(privateKey, rawData));\n}\n\nexport function getGistById(gistId) {\n  return fetch(`https://api.github.com/gists/${gistId}`).then(result => result.json());\n}\n\nfunction getRawData(username) {\n    return getGistId(username)\n    .then(getGistById)\n    .then(gist => {\n      return gist.files['hips_passwords'].content;\n    });\n}\n\nfunction getGistId(username) {\n  if (window.localStorage.gistId) {\n    return Promise.resolve(window.localStorage.gistId);\n  }\n  return fetch(`https://api.github.com/users/${username}/gists`)\n  .then(result => result.json())\n  .then(gists => gists.find(gist => gist.description.match(/^hips.storage$/)))\n  .then(gist => {\n    window.localStorage.gistId = gist.id;\n    return gist.id;\n  });\n}","import React from 'react';\nimport {getGistById} from '../persistence/persistence';\nimport QrReader from 'react-qr-reader';\n\nclass KeyImporter extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      importStarted: false,\n      error: null\n    }\n  }\n\n  componentDidMount() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const gistId = urlParams.get('gistId')\n    if (gistId) {\n      this.doImport(gistId);\n    }\n  }\n\n  doImport(gistId) {\n    this.setState({importStarted: true});\n    getGistById(gistId)\n    .then(gist => {\n      window.localStorage.username = gist.owner.login\n      window.localStorage.hips = gist.files['hips_data'].content;\n      this.props.callback();\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({error: err.stack})\n    });\n  }\n\n  handleError = (err) => {\n    this.setState({error: err.stack});\n  }\n\n  handleScan = gistId => {\n    this.doImport(gistId);\n  }\n\n  renderQRCOdeReader() {\n    return (\n      <div>\n        <h1>Scan the QRCode from the CLI</h1>\n        <QrReader\n            delay={300}\n            onError={this.handleError}\n            onScan={this.handleScan}\n            style={{ width: '100%' }} />\n        {this.state.error && (\n          <p>{this.state.error}</p>\n        )}\n      </div>\n    )\n  }\n\n  renderWaitingScreen() {\n    return (\n      <div className=\"importer\">\n        <h1 className=\"title is-3\">We are importing your data</h1>\n        <p>Please wait</p>\n        {this.state.error && (\n          <p>{this.state.error}</p>\n        )}\n      </div>\n    )\n  }\n\n  render() {\n    if (this.state.importStarted) {\n      return this.renderWaitingScreen();\n    }\n    else {\n      return this.renderQRCOdeReader();\n    }\n  }\n}\n\nexport default KeyImporter;","import React from 'react';\nimport {getRsaKeys} from '../crypto/cryptography';\n\nclass RequestMasterKeyComponent extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      masterKey: '',\n      test: ''\n    };\n    this.crypto = JSON.parse(window.localStorage.hips);\n  }\n\n  handleInput = (e) => {\n    this.setState({masterKey: e.target.value});\n  }\n\n  unlock = () => {\n    getRsaKeys(this.state.masterKey).then(keys => {\n      this.props.onFinish(this.state.masterKey);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"masterkey\">\n        <h1 className=\"title is-3\">Enter Master Key</h1>\n        <input type=\"password\" value={this.state.masterKey} onChange={this.handleInput} className=\"input is-primary\" />\n        <button className=\"button is-primary is-large masterkey-button\" onClick={this.unlock}>Unlock</button>\n        <p>{this.state.test}</p>\n      </div>\n    );\n  }\n}\n\nexport default RequestMasterKeyComponent;","import React from 'react';\nimport {getData} from '../persistence/persistence';\nimport Clipboard from 'react-clipboard.js';\n\nclass HomeComponent extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      passwords: [],\n      selected: ''\n    };\n  }\n\n  componentDidMount() {\n    const username = window.localStorage.username;\n    getData(this.props.masterKey, username).then(data => {\n      this.setState({passwords: data.passwords})\n    });\n  }\n\n  select = (p) => () => {\n    this.setState({selected: p.password});\n  }\n\n  onSelect = (p) => () => {\n    alert(`password ${p.name} copied to the clipboard`);\n  }\n\n  reset = () => {\n    delete window.localStorage.hips;\n    delete window.localStorage.gistId;\n    delete window.localStorage.credentials;\n    window.location.reload();\n  }\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"home\">\n          <h1 className=\"title is-3 home-title\">Stored Passwords</h1>\n          <div className=\"home-passwords\">\n            {this.state.passwords.map(p => (\n                <Clipboard key={p.key} className=\"button home-button is-primary\" data-clipboard-text={p.password} onSuccess={this.onSelect(p)}>\n                  {p.name}\n                </Clipboard>\n            ))}\n          </div>\n        </div>\n        <div className=\"reset-wrapper\">\n          <button className=\"button home-reset is-danger is-fullwidth\" onClick={this.reset}>reset</button>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default HomeComponent;","import React from 'react';\nimport './App.css';\nimport 'bulma';\nimport KeyImporter from './components/keyImporter';\nimport RequestMasterKeyComponent from './components/requestMasterKeyComponent';\nimport HomeComponent from './components/homeComponent';\n\nfunction hasImportedData() {\n  return !!window.localStorage.hips;\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      hasImportedData: hasImportedData(),\n      masterKey: '',\n    }\n  }\n\n  masterKeyCallback = (key) => {\n    this.setState({masterKey: key});\n  }\n\n  importCallback = () => {\n    this.setState({hasImportedData: true});\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        {this.renderPage()}\n      </div>\n    );\n  }\n\n  renderPage() {\n    if(!this.state.hasImportedData) {\n      return <KeyImporter callback={this.importCallback}/>\n    }\n    else if (!this.state.masterKey) {\n      return <RequestMasterKeyComponent onFinish={this.masterKeyCallback} />\n    }\n    else {\n      return <HomeComponent masterKey={this.state.masterKey} />\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}